#################################################################################################################################
#                                                 Semgrep registry rules													#
#################################################################################################################################


rules:

  #################################
  #A01:2021 - Broken Access Control
  #################################

  - id: tainted-session
    severity: WARNING
    message: Session key based on user input risks session poisoning. The user can
      determine the key used for the session, and thus write any session
      variable. Session variables are typically trusted to be set only by the
      application, and manipulating the session can result in access control
      issues.
    metadata:
      technology:
        - php
      category: security
      cwe:
        - "CWE-284: Improper Access Control"
      owasp:
        - A01:2021 - Broken Access Control
      references:
        - https://en.wikipedia.org/wiki/Session_poisoning
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      impact: MEDIUM
      likelihood: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Improper Authorization
    languages:
      - php
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: $_GET
              - pattern: $_POST
              - pattern: $_COOKIE
              - pattern: $_REQUEST
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern: $A . $B
              - pattern: bin2hex(...)
              - pattern: crc32(...)
              - pattern: crypt(...)
              - pattern: filter_input(...)
              - pattern: filter_var(...)
              - pattern: hash(...)
              - pattern: md5(...)
              - pattern: preg_filter(...)
              - pattern: preg_grep(...)
              - pattern: preg_match_all(...)
              - pattern: sha1(...)
              - pattern: sprintf(...)
              - pattern: str_contains(...)
              - pattern: str_ends_with(...)
              - pattern: str_starts_with(...)
              - pattern: strcasecmp(...)
              - pattern: strchr(...)
              - pattern: stripos(...)
              - pattern: stristr(...)
              - pattern: strnatcasecmp(...)
              - pattern: strnatcmp(...)
              - pattern: strncmp(...)
              - pattern: strpbrk(...)
              - pattern: strpos(...)
              - pattern: strripos(...)
              - pattern: strrpos(...)
              - pattern: strspn(...)
              - pattern: strstr(...)
              - pattern: strtok(...)
              - pattern: substr_compare(...)
              - pattern: substr_count(...)
              - pattern: vsprintf(...)
    pattern-sinks:
      - patterns:
          - pattern-inside: $_SESSION[$KEY] = $VAL;
          - pattern: $KEY

  - id: phpinfo-use
    pattern: phpinfo(...);
    message: The 'phpinfo' function may reveal sensitive information about your
      environment.
    metadata:
      cwe:
        - "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor"
      references:
        - https://www.php.net/manual/en/function.phpinfo
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php
      category: security
      technology:
        - php
      owasp:
        - A01:2021 - Broken Access Control
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - php
    severity: ERROR

  - id: redirect-to-request-uri
    patterns:
      - pattern-either:
          - pattern: |
              header('$LOCATION' . $_SERVER['REQUEST_URI']);
          - pattern: |
              header('$LOCATION' . $_SERVER['REQUEST_URI'] . $MORE);
      - metavariable-regex:
          metavariable: $LOCATION
          regex: ^(?i)location:\s*$
    message: Redirecting to the current request URL may redirect to another domain,
      if the current path starts with two slashes.  E.g. in
      https://www.example.com//attacker.com, the value of REQUEST_URI is
      //attacker.com, and redirecting to it will redirect to that domain.
    metadata:
      references:
        - https://www.php.net/manual/en/reserved.variables.server.php
        - https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html
      category: security
      technology:
        - php
      owasp:
        - A05:2017 - Broken Access Control
        - A01:2021 - Broken Access Control
      cwe:
        - "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')"
      likelihood: MEDIUM
      impact: LOW
      confidence: MEDIUM
      subcategory:
        - vuln
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Open Redirect
    languages:
      - php
    severity: WARNING

  ##################################
  #A02:2021 - Cryptographic Failures 
  ##################################

  - id: md5-used-as-password
    severity: WARNING
    message: It looks like MD5 is used as a password hash. MD5 is not considered a
      secure password hash because it can be cracked by an attacker in a short
      amount of time. Use a suitable password hashing function such as bcrypt.
      You can use `password_hash($PASSWORD, PASSWORD_BCRYPT, $OPTIONS);`.
    languages:
      - php
    metadata:
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      references:
        - https://tools.ietf.org/html/rfc6151
        - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
        - https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords
        - https://github.com/returntocorp/semgrep-rules/issues/1609
        - https://www.php.net/password_hash
      category: security
      technology:
        - md5
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Cryptographic Issues
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: md5(...)
              - pattern: hash('md5', ...)
    pattern-sinks:
      - patterns:
          - pattern: $FUNCTION(...)
          - metavariable-regex:
              metavariable: $FUNCTION
              regex: (?i)(.*password.*)

  - id: curl-ssl-verifypeer-off
    patterns:
      - pattern-either:
          - pattern: |
              $ARG = $IS_VERIFIED;
              ...
              curl_setopt(..., CURLOPT_SSL_VERIFYPEER, $ARG);
          - pattern: curl_setopt(..., CURLOPT_SSL_VERIFYPEER, $IS_VERIFIED)
      - metavariable-regex:
          metavariable: $IS_VERIFIED
          regex: 0|false|null
    message: SSL verification is disabled but should not be (currently
      CURLOPT_SSL_VERIFYPEER= $IS_VERIFIED)
    metadata:
      cwe:
        - "CWE-319: Cleartext Transmission of Sensitive Information"
      references:
        - https://www.saotn.org/dont-turn-off-curlopt_ssl_verifypeer-fix-php-configuration/
      category: security
      technology:
        - php
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      subcategory:
        - vuln
      likelihood: LOW
      impact: LOW
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Mishandled Sensitive Information
    languages:
      - php
    severity: ERROR

  - id: openssl-cbc-static-iv
    patterns:
      - pattern-either:
          - pattern: openssl_encrypt($D, $M, $K, $FLAGS, "...",...);
          - pattern: openssl_decrypt($D, $M, $K, $FLAGS, "...",...);
      - metavariable-comparison:
          metavariable: $M
          comparison: re.match(".*-CBC",$M)
    message: Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext
      attacks against encrypted data.
    languages:
      - php
    severity: ERROR
    metadata:
      cwe:
        - "CWE-329: Generation of Predictable IV with CBC Mode"
      references:
        - https://csrc.nist.gov/publications/detail/sp/800-38a/final
      owasp:
        - A02:2021 - Cryptographic Failures
      technology:
        - php
        - openssl
      category: security
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: HIGH
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Cryptographic Issues

  ###########################
  #A03:2021 - Injection
  ###########################

  - id: doctrine-orm-dangerous-query
    languages:
      - php
    message: "`$QUERY` Detected string concatenation with a non-literal variable in
      a Doctrine QueryBuilder method. This could lead to SQL injection if the
      variable is user-controlled and not properly sanitized. In order to
      prevent SQL injection, use parameterized queries or prepared statements
      instead."
    metadata:
      category: security
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      references:
        - https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection
        - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
      technology:
        - doctrine
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      vulnerability_class:
        - SQL Injection
    mode: taint
    pattern-sinks:
      - patterns:
          - focus-metavariable: $SINK
          - pattern-either:
              - pattern: $QUERY->add(...,$SINK,...)
              - pattern: $QUERY->select(...,$SINK,...)
              - pattern: $QUERY->addSelect(...,$SINK,...)
              - pattern: $QUERY->delete(...,$SINK,...)
              - pattern: $QUERY->update(...,$SINK,...)
              - pattern: $QUERY->insert(...,$SINK,...)
              - pattern: $QUERY->from(...,$SINK,...)
              - pattern: $QUERY->join(...,$SINK,...)
              - pattern: $QUERY->innerJoin(...,$SINK,...)
              - pattern: $QUERY->leftJoin(...,$SINK,...)
              - pattern: $QUERY->rightJoin(...,$SINK,...)
              - pattern: $QUERY->where(...,$SINK,...)
              - pattern: $QUERY->andWhere(...,$SINK,...)
              - pattern: $QUERY->orWhere(...,$SINK,...)
              - pattern: $QUERY->groupBy(...,$SINK,...)
              - pattern: $QUERY->addGroupBy(...,$SINK,...)
              - pattern: $QUERY->having(...,$SINK,...)
              - pattern: $QUERY->andHaving(...,$SINK,...)
              - pattern: $QUERY->orHaving(...,$SINK,...)
              - pattern: $QUERY->orderBy(...,$SINK,...)
              - pattern: $QUERY->addOrderBy(...,$SINK,...)
              - pattern: $QUERY->set($SINK,...)
              - pattern: $QUERY->setValue($SINK,...)
          - pattern-either:
              - pattern-inside: |
                  $Q = $X->createQueryBuilder();
                  ...
              - pattern-inside: |
                  $Q = new QueryBuilder(...);
                  ...
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: sprintf(...)
              - pattern: |
                  "...".$SMTH
    severity: WARNING

  - id: echoed-request
    mode: taint
    message: "`Echo`ing user input risks cross-site scripting vulnerability. You
      should use `htmlentities()` when showing data to users."
    languages:
      - php
    severity: ERROR
    pattern-sources:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
    pattern-sinks:
      - pattern: echo $...VARS;
    pattern-sanitizers:
      - pattern: htmlentities(...)
      - pattern: htmlspecialchars(...)
      - pattern: strip_tags(...)
      - pattern: isset(...)
      - pattern: empty(...)
      - pattern: esc_html(...)
      - pattern: esc_attr(...)
      - pattern: wp_kses(...)
      - pattern: e(...)
      - pattern: twig_escape_filter(...)
      - pattern: xss_clean(...)
      - pattern: html_escape(...)
      - pattern: Html::escape(...)
      - pattern: Xss::filter(...)
      - pattern: escapeHtml(...)
      - pattern: escapeHtml(...)
      - pattern: escapeHtmlAttr(...)
    fix: echo htmlentities($...VARS);
    metadata:
      technology:
        - php
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      category: security
      references:
        - https://www.php.net/manual/en/function.htmlentities.php
        - https://www.php.net/manual/en/reserved.variables.request.php
        - https://www.php.net/manual/en/reserved.variables.post.php
        - https://www.php.net/manual/en/reserved.variables.get.php
        - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Cross-Site-Scripting (XSS)

  - id: printed-request
    mode: taint
    message: "`Printing user input risks cross-site scripting vulnerability. You
      should use `htmlentities()` when showing data to users."
    languages:
      - php
    severity: ERROR
    pattern-sources:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
    pattern-sinks:
      - pattern: print($...VARS);
    pattern-sanitizers:
      - pattern: htmlentities(...)
      - pattern: htmlspecialchars(...)
      - pattern: strip_tags(...)
      - pattern: isset(...)
      - pattern: empty(...)
      - pattern: esc_html(...)
      - pattern: esc_attr(...)
      - pattern: wp_kses(...)
      - pattern: e(...)
      - pattern: twig_escape_filter(...)
      - pattern: xss_clean(...)
      - pattern: html_escape(...)
      - pattern: Html::escape(...)
      - pattern: Xss::filter(...)
      - pattern: escapeHtml(...)
      - pattern: escapeHtml(...)
      - pattern: escapeHtmlAttr(...)
    fix: print(htmlentities($...VARS));
    metadata:
      technology:
        - php
      cwe:
        - "CWE-79: Improper Neutralization of Input During Web Page Generation
          ('Cross-site Scripting')"
      owasp:
        - A07:2017 - Cross-Site Scripting (XSS)
        - A03:2021 - Injection
      category: security
      references:
        - https://www.php.net/manual/en/function.htmlentities.php
        - https://www.php.net/manual/en/reserved.variables.request.php
        - https://www.php.net/manual/en/reserved.variables.post.php
        - https://www.php.net/manual/en/reserved.variables.get.php
        - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Cross-Site-Scripting (XSS)

  - id: tainted-object-instantiation
    languages:
      - php
    severity: WARNING
    message: <- A new object is created where the class name is based on user input.
      This could lead to remote code execution, as it allows to instantiate any
      class in the application.
    metadata:
      cwe:
        - "CWE-470: Use of Externally-Controlled Input to Select Classes or Code
          ('Unsafe Reflection')"
      category: security
      technology:
        - php
      owasp:
        - A03:2021 - Injection
      references:
        - https://owasp.org/Top10/A03_2021-Injection
      subcategory:
        - vuln
      impact: MEDIUM
      likelihood: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Improper Authorization
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: $_GET
              - pattern: $_POST
              - pattern: $_COOKIE
              - pattern: $_REQUEST
              - pattern: $_SERVER
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: new $SINK(...)
          - pattern: $SINK

  - id: tainted-sql-string
    languages:
      - php
    severity: ERROR
    message: User data flows into this manually-constructed SQL string. User data
      can be safely inserted into SQL strings using prepared statements or an
      object-relational mapper (ORM). Manually-constructed SQL strings is a
      possible indicator of SQL injection, which could let an attacker steal or
      manipulate data from the database. Instead, use prepared statements
      (`$mysqli->prepare("INSERT INTO test(id, label) VALUES (?, ?)");`) or a
      safe library.
    metadata:
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      references:
        - https://owasp.org/www-community/attacks/SQL_Injection
      category: security
      technology:
        - php
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - SQL Injection
    mode: taint
    pattern-sanitizers:
      - pattern-either:
          - pattern: mysqli_real_escape_string(...)
          - pattern: real_escape_string(...)
          - pattern: $MYSQLI->real_escape_string(...)
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: $_GET
              - pattern: $_POST
              - pattern: $_COOKIE
              - pattern: $_REQUEST
    pattern-sinks:
      - pattern-either:
          - patterns:
              - pattern: |
                  sprintf($SQLSTR, ...)
              - metavariable-regex:
                  metavariable: $SQLSTR
                  regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
          - patterns:
              - pattern: |
                  "...$EXPR..."
              - metavariable-regex:
                  metavariable: $EXPR
                  regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
          - patterns:
              - pattern: |
                  "$SQLSTR".$EXPR
              - metavariable-regex:
                  metavariable: $SQLSTR
                  regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*

  - id: tainted-exec
    mode: taint
    pattern-sources:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_COOKIE
    pattern-sinks:
      - pattern: exec(...)
      - pattern: system(...)
      - pattern: popen(...)
      - pattern: passthru(...)
      - pattern: shell_exec(...)
      - pattern: pcntl_exec(...)
      - pattern: proc_open(...)
    pattern-sanitizers:
      - pattern: escapeshellarg(...)
    message: Executing non-constant commands. This can lead to command injection.
      You should use `escapeshellarg()` when using command.
    metadata:
      cwe:
        - "CWE-94: Improper Control of Generation of Code ('Code Injection')"
      references:
        - https://www.stackhawk.com/blog/php-command-injection/
        - https://brightsec.com/blog/code-injection-php/
        - https://www.acunetix.com/websitesecurity/php-security-2/
      category: security
      technology:
        - php
      owasp:
        - A03:2021 - Injection
      cwe2022-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: HIGH
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Code Injection
    languages:
      - php
    severity: ERROR

  - id: laravel-sql-injection
    metadata:
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      category: security
      technology:
        - laravel
      references:
        - https://laravel.com/docs/8.x/queries
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - SQL Injection
    severity: WARNING
    message: Detected a SQL query based on user input. This could lead to SQL
      injection, which could potentially result in sensitive data being
      exfiltrated by attackers. Instead, use parameterized queries and prepared
      statements.
    languages:
      - php
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: $_GET
              - pattern: $_POST
              - pattern: $_COOKIE
              - pattern: $_REQUEST
              - pattern: $_SERVER
    pattern-sinks:
      - patterns:
          - pattern-either:
              - patterns:
                  - pattern: $SQL
                  - pattern-either:
                      - pattern-inside: DB::table(...)->whereRaw($SQL, ...)
                      - pattern-inside: DB::table(...)->orWhereRaw($SQL, ...)
                      - pattern-inside: DB::table(...)->groupByRaw($SQL, ...)
                      - pattern-inside: DB::table(...)->havingRaw($SQL, ...)
                      - pattern-inside: DB::table(...)->orHavingRaw($SQL, ...)
                      - pattern-inside: DB::table(...)->orderByRaw($SQL, ...)
              - patterns:
                  - pattern: $EXPRESSION
                  - pattern-either:
                      - pattern-inside: DB::table(...)->selectRaw($EXPRESSION, ...)
                      - pattern-inside: DB::table(...)->fromRaw($EXPRESSION, ...)
              - patterns:
                  - pattern: $COLUMNS
                  - pattern-either:
                      - pattern-inside: DB::table(...)->whereNull($COLUMNS, ...)
                      - pattern-inside: DB::table(...)->orWhereNull($COLUMN)
                      - pattern-inside: DB::table(...)->whereNotNull($COLUMNS, ...)
                      - pattern-inside: DB::table(...)->whereRowValues($COLUMNS, ...)
                      - pattern-inside: DB::table(...)->orWhereRowValues($COLUMNS, ...)
                      - pattern-inside: DB::table(...)->find($ID, $COLUMNS)
                      - pattern-inside: DB::table(...)->paginate($PERPAGE, $COLUMNS, ...)
                      - pattern-inside: DB::table(...)->simplePaginate($PERPAGE, $COLUMNS, ...)
                      - pattern-inside: DB::table(...)->cursorPaginate($PERPAGE, $COLUMNS, ...)
                      - pattern-inside: DB::table(...)->getCountForPagination($COLUMNS)
                      - pattern-inside: DB::table(...)->aggregate($FUNCTION, $COLUMNS)
                      - pattern-inside: DB::table(...)->numericAggregate($FUNCTION, $COLUMNS)
                      - pattern-inside: DB::table(...)->insertUsing($COLUMNS, ...)
                      - pattern-inside: DB::table(...)->select($COLUMNS)
                      - pattern-inside: DB::table(...)->get($COLUMNS)
                      - pattern-inside: DB::table(...)->count($COLUMNS)
              - patterns:
                  - pattern: $COLUMN
                  - pattern-either:
                      - pattern-inside: DB::table(...)->whereIn($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereIn($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereNotIn($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereNotIn($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereIntegerInRaw($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereIntegerInRaw($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereIntegerNotInRaw($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereIntegerNotInRaw($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereBetweenColumns($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereBetween($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereBetweenColumns($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereNotBetween($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereNotBetweenColumns($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereNotBetween($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereNotBetweenColumns($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereNotNull($COLUMN)
                      - pattern-inside: DB::table(...)->whereDate($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereDate($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereTime($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereTime($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereDay($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereDay($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereMonth($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereMonth($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereYear($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereYear($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereJsonContains($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereJsonContains($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereJsonDoesntContain($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereJsonDoesntContain($COLUMN, ...)
                      - pattern-inside: DB::table(...)->whereJsonLength($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhereJsonLength($COLUMN, ...)
                      - pattern-inside: DB::table(...)->having($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orHaving($COLUMN, ...)
                      - pattern-inside: DB::table(...)->havingBetween($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orderBy($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orderByDesc($COLUMN)
                      - pattern-inside: DB::table(...)->latest($COLUMN)
                      - pattern-inside: DB::table(...)->oldest($COLUMN)
                      - pattern-inside: DB::table(...)->forPageBeforeId($PERPAGE, $LASTID, $COLUMN)
                      - pattern-inside: DB::table(...)->forPageAfterId($PERPAGE, $LASTID, $COLUMN)
                      - pattern-inside: DB::table(...)->value($COLUMN)
                      - pattern-inside: DB::table(...)->pluck($COLUMN, ...)
                      - pattern-inside: DB::table(...)->implode($COLUMN, ...)
                      - pattern-inside: DB::table(...)->min($COLUMN)
                      - pattern-inside: DB::table(...)->max($COLUMN)
                      - pattern-inside: DB::table(...)->sum($COLUMN)
                      - pattern-inside: DB::table(...)->avg($COLUMN)
                      - pattern-inside: DB::table(...)->average($COLUMN)
                      - pattern-inside: DB::table(...)->increment($COLUMN, ...)
                      - pattern-inside: DB::table(...)->decrement($COLUMN, ...)
                      - pattern-inside: DB::table(...)->where($COLUMN, ...)
                      - pattern-inside: DB::table(...)->orWhere($COLUMN, ...)
                      - pattern-inside: DB::table(...)->addSelect($COLUMN)
              - patterns:
                  - pattern: $QUERY
                  - pattern-inside: DB::unprepared($QUERY)

  - id: laravel-unsafe-validator
    mode: taint
    pattern-sources:
      - patterns:
          - pattern: |
              public function $F(...,Request $R,...){...}
          - focus-metavariable: $R
      - patterns:
          - pattern-either:
              - pattern: |
                  $this->$PROPERTY
              - pattern: |
                  $this->$PROPERTY->$GET
          - metavariable-pattern:
              metavariable: $PROPERTY
              patterns:
                - pattern-either:
                    - pattern: query
                    - pattern: request
                    - pattern: headers
                    - pattern: cookies
                    - pattern: cookie
                    - pattern: files
                    - pattern: file
                    - pattern: allFiles
                    - pattern: input
                    - pattern: all
                    - pattern: post
                    - pattern: json
          - pattern-either:
              - pattern-inside: |
                  class $CL extends Illuminate\Http\Request {...}
              - pattern-inside: |
                  class $CL extends Illuminate\Foundation\Http\FormRequest {...}
    pattern-sinks:
      - patterns:
          - pattern: |
              Illuminate\Validation\Rule::unique(...)->ignore(...,$IGNORE,...)
          - focus-metavariable: $IGNORE
    message: Found a request argument passed to an `ignore()` definition in a Rule
      constraint. This can lead to SQL injection.
    languages:
      - php
    severity: ERROR
    metadata:
      category: security
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      technology:
        - php
        - laravel
      references:
        - https://laravel.com/docs/9.x/validation#rule-unique
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - SQL Injection

  - id: assert-use
    mode: taint
    pattern-sources:
      - pattern-either:
          - patterns:
              - pattern-either:
                  - pattern: $_GET
                  - pattern: $_POST
                  - pattern: $_COOKIE
                  - pattern: $_REQUEST
                  - pattern: $_SERVER
          - patterns:
              - pattern: |
                  Route::$METHOD($ROUTENAME, function(..., $ARG, ...) { ... })
              - focus-metavariable: $ARG
    pattern-sinks:
      - patterns:
          - pattern: assert($SINK, ...);
          - pattern-not: assert("...", ...);
          - pattern: $SINK
    message: Calling assert with user input is equivalent to eval'ing.
    metadata:
      owasp:
        - A03:2021 - Injection
      cwe:
        - "CWE-95: Improper Neutralization of Directives in Dynamically
          Evaluated Code ('Eval Injection')"
      references:
        - https://www.php.net/manual/en/function.assert
        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php
      category: security
      technology:
        - php
      confidence: HIGH
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Code Injection
    languages:
      - php
    severity: ERROR

  - id: laravel-api-route-sql-injection
    mode: taint
    pattern-sources:
      - patterns:
          - focus-metavariable: $ARG
          - pattern-inside: |
              Route::$METHOD($ROUTE_NAME, function(...,$ARG,...){...})
    pattern-sanitizers:
      - patterns:
          - pattern: |
              DB::raw("...",[...])
    pattern-sinks:
      - patterns:
          - pattern: |
              DB::raw(...)
    message: HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL
      injection via string concatenation or unsafe interpolation.
    languages:
      - php
    severity: WARNING
    metadata:
      category: security
      cwe:
        - "CWE-89: Improper Neutralization of Special Elements used in an SQL
          Command ('SQL Injection')"
      owasp:
        - A01:2017 - Injection
        - A03:2021 - Injection
      references:
        - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md
      technology:
        - php
        - laravel
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - SQL Injection

  ################################################
  #A08:2021 - Software and Data Integrity Failures
  ################################################

  - id: extract-user-data
    mode: taint
    pattern-sources:
      - pattern-either:
          - pattern: $_GET[...]
          - pattern: $_FILES[...]
          - pattern: $_POST[...]
    pattern-sinks:
      - pattern: extract(...)
    pattern-sanitizers:
      - pattern: extract($VAR, EXTR_SKIP,...)
    message: Do not call 'extract()' on user-controllable data. If you must, then
      you must also provide the EXTR_SKIP flag to prevent overwriting existing
      variables.
    languages:
      - php
    metadata:
      category: security
      cwe:
        - "CWE-502: Deserialization of Untrusted Data"
      owasp:
        - A08:2017 - Insecure Deserialization
        - A08:2021 - Software and Data Integrity Failures
      technology:
        - php
      references:
        - https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: MEDIUM
      impact: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - "Insecure Deserialization "
    severity: ERROR

  ##############################################
  #A10:2021 - Server-Side Request Forgery (SSRF)
  ##############################################

  - id: tainted-filename
    severity: WARNING
    message: File name based on user input risks server-side request forgery.
    metadata:
      technology:
        - php
      category: security
      cwe:
        - "CWE-918: Server-Side Request Forgery (SSRF)"
      owasp:
        - A10:2021 - Server-Side Request Forgery (SSRF)
      references:
        - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      impact: MEDIUM
      likelihood: MEDIUM
      confidence: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Server-Side Request Forgery (SSRF)
    languages:
      - php
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: $_GET
              - pattern: $_POST
              - pattern: $_COOKIE
              - pattern: $_REQUEST
              - pattern: $_SERVER
    pattern-sanitizers:
      - patterns:
          - pattern-either:
              - pattern-inside: basename($PATH, ...)
              - pattern-inside: linkinfo($PATH, ...)
              - pattern-inside: readlink($PATH, ...)
              - pattern-inside: realpath($PATH, ...)
    pattern-sinks:
      - patterns:
          - pattern-either:
              - pattern-inside: opcache_compile_file($FILENAME, ...)
              - pattern-inside: opcache_invalidate($FILENAME, ...)
              - pattern-inside: opcache_is_script_cached($FILENAME, ...)
              - pattern-inside: runkit7_import($FILENAME, ...)
              - pattern-inside: readline_read_history($FILENAME, ...)
              - pattern-inside: readline_write_history($FILENAME, ...)
              - pattern-inside: rar_open($FILENAME, ...)
              - pattern-inside: zip_open($FILENAME, ...)
              - pattern-inside: gzfile($FILENAME, ...)
              - pattern-inside: gzopen($FILENAME, ...)
              - pattern-inside: readgzfile($FILENAME, ...)
              - pattern-inside: hash_file($ALGO, $FILENAME, ...)
              - pattern-inside: hash_update_file($CONTEXT, $FILENAME, ...)
              - pattern-inside: pg_trace($FILENAME, ...)
              - pattern-inside: dio_open($FILENAME, ...)
              - pattern-inside: finfo_file($FINFO, $FILENAME, ...)
              - pattern-inside: mime_content_type($FILENAME, ...)
              - pattern-inside: chgrp($FILENAME, ...)
              - pattern-inside: chmod($FILENAME, ...)
              - pattern-inside: chown($FILENAME, ...)
              - pattern-inside: clearstatcache($CLEAR_REALPATH_CACHE, $FILENAME, ...)
              - pattern-inside: file_exists($FILENAME, ...)
              - pattern-inside: file_get_contents($FILENAME, ...)
              - pattern-inside: file_put_contents($FILENAME, ...)
              - pattern-inside: file($FILENAME, ...)
              - pattern-inside: fileatime($FILENAME, ...)
              - pattern-inside: filectime($FILENAME, ...)
              - pattern-inside: filegroup($FILENAME, ...)
              - pattern-inside: fileinode($FILENAME, ...)
              - pattern-inside: filemtime($FILENAME, ...)
              - pattern-inside: fileowner($FILENAME, ...)
              - pattern-inside: fileperms($FILENAME, ...)
              - pattern-inside: filesize($FILENAME, ...)
              - pattern-inside: filetype($FILENAME, ...)
              - pattern-inside: fnmatch($PATTERN, $FILENAME, ...)
              - pattern-inside: fopen($FILENAME, ...)
              - pattern-inside: is_dir($FILENAME, ...)
              - pattern-inside: is_executable($FILENAME, ...)
              - pattern-inside: is_file($FILENAME, ...)
              - pattern-inside: is_link($FILENAME, ...)
              - pattern-inside: is_readable($FILENAME, ...)
              - pattern-inside: is_uploaded_file($FILENAME, ...)
              - pattern-inside: is_writable($FILENAME, ...)
              - pattern-inside: lchgrp($FILENAME, ...)
              - pattern-inside: lchown($FILENAME, ...)
              - pattern-inside: lstat($FILENAME, ...)
              - pattern-inside: parse_ini_file($FILENAME, ...)
              - pattern-inside: readfile($FILENAME, ...)
              - pattern-inside: stat($FILENAME, ...)
              - pattern-inside: touch($FILENAME, ...)
              - pattern-inside: unlink($FILENAME, ...)
              - pattern-inside: xattr_get($FILENAME, ...)
              - pattern-inside: xattr_list($FILENAME, ...)
              - pattern-inside: xattr_remove($FILENAME, ...)
              - pattern-inside: xattr_set($FILENAME, ...)
              - pattern-inside: xattr_supported($FILENAME, ...)
              - pattern-inside: enchant_broker_request_pwl_dict($BROKER, $FILENAME, ...)
              - pattern-inside: pspell_config_personal($CONFIG, $FILENAME, ...)
              - pattern-inside: pspell_config_repl($CONFIG, $FILENAME, ...)
              - pattern-inside: pspell_new_personal($FILENAME, ...)
              - pattern-inside: exif_imagetype($FILENAME, ...)
              - pattern-inside: getimagesize($FILENAME, ...)
              - pattern-inside: image2wbmp($IMAGE, $FILENAME, ...)
              - pattern-inside: imagecreatefromavif($FILENAME, ...)
              - pattern-inside: imagecreatefrombmp($FILENAME, ...)
              - pattern-inside: imagecreatefromgd2($FILENAME, ...)
              - pattern-inside: imagecreatefromgd2part($FILENAME, ...)
              - pattern-inside: imagecreatefromgd($FILENAME, ...)
              - pattern-inside: imagecreatefromgif($FILENAME, ...)
              - pattern-inside: imagecreatefromjpeg($FILENAME, ...)
              - pattern-inside: imagecreatefrompng($FILENAME, ...)
              - pattern-inside: imagecreatefromtga($FILENAME, ...)
              - pattern-inside: imagecreatefromwbmp($FILENAME, ...)
              - pattern-inside: imagecreatefromwebp($FILENAME, ...)
              - pattern-inside: imagecreatefromxbm($FILENAME, ...)
              - pattern-inside: imagecreatefromxpm($FILENAME, ...)
              - pattern-inside: imageloadfont($FILENAME, ...)
              - pattern-inside: imagexbm($IMAGE, $FILENAME, ...)
              - pattern-inside: iptcembed($IPTC_DATA, $FILENAME, ...)
              - pattern-inside: mailparse_msg_extract_part_file($MIMEMAIL, $FILENAME, ...)
              - pattern-inside: mailparse_msg_extract_whole_part_file($MIMEMAIL, $FILENAME, ...)
              - pattern-inside: mailparse_msg_parse_file($FILENAME, ...)
              - pattern-inside: fdf_add_template($FDF_DOCUMENT, $NEWPAGE, $FILENAME, ...)
              - pattern-inside: fdf_get_ap($FDF_DOCUMENT, $FIELD, $FACE, $FILENAME, ...)
              - pattern-inside: fdf_open($FILENAME, ...)
              - pattern-inside: fdf_save($FDF_DOCUMENT, $FILENAME, ...)
              - pattern-inside: fdf_set_ap($FDF_DOCUMENT, $FIELD_NAME, $FACE, $FILENAME, ...)
              - pattern-inside: ps_add_launchlink($PSDOC, $LLX, $LLY, $URX, $URY, $FILENAME,
                  ...)
              - pattern-inside: ps_add_pdflink($PSDOC, $LLX, $LLY, $URX, $URY, $FILENAME, ...)
              - pattern-inside: ps_open_file($PSDOC, $FILENAME, ...)
              - pattern-inside: ps_open_image_file($PSDOC, $TYPE, $FILENAME, ...)
              - pattern-inside: posix_access($FILENAME, ...)
              - pattern-inside: posix_mkfifo($FILENAME, ...)
              - pattern-inside: posix_mknod($FILENAME, ...)
              - pattern-inside: ftok($FILENAME, ...)
              - pattern-inside: fann_cascadetrain_on_file($ANN, $FILENAME, ...)
              - pattern-inside: fann_read_train_from_file($FILENAME, ...)
              - pattern-inside: fann_train_on_file($ANN, $FILENAME, ...)
              - pattern-inside: highlight_file($FILENAME, ...)
              - pattern-inside: php_strip_whitespace($FILENAME, ...)
              - pattern-inside: stream_resolve_include_path($FILENAME, ...)
              - pattern-inside: swoole_async_read($FILENAME, ...)
              - pattern-inside: swoole_async_readfile($FILENAME, ...)
              - pattern-inside: swoole_async_write($FILENAME, ...)
              - pattern-inside: swoole_async_writefile($FILENAME, ...)
              - pattern-inside: swoole_load_module($FILENAME, ...)
              - pattern-inside: tidy_parse_file($FILENAME, ...)
              - pattern-inside: tidy_repair_file($FILENAME, ...)
              - pattern-inside: get_meta_tags($FILENAME, ...)
              - pattern-inside: yaml_emit_file($FILENAME, ...)
              - pattern-inside: yaml_parse_file($FILENAME, ...)
              - pattern-inside: curl_file_create($FILENAME, ...)
              - pattern-inside: ftp_chmod($FTP, $PERMISSIONS, $FILENAME, ...)
              - pattern-inside: ftp_delete($FTP, $FILENAME, ...)
              - pattern-inside: ftp_mdtm($FTP, $FILENAME, ...)
              - pattern-inside: ftp_size($FTP, $FILENAME, ...)
              - pattern-inside: rrd_create($FILENAME, ...)
              - pattern-inside: rrd_fetch($FILENAME, ...)
              - pattern-inside: rrd_graph($FILENAME, ...)
              - pattern-inside: rrd_info($FILENAME, ...)
              - pattern-inside: rrd_last($FILENAME, ...)
              - pattern-inside: rrd_lastupdate($FILENAME, ...)
              - pattern-inside: rrd_tune($FILENAME, ...)
              - pattern-inside: rrd_update($FILENAME, ...)
              - pattern-inside: snmp_read_mib($FILENAME, ...)
              - pattern-inside: ssh2_sftp_chmod($SFTP, $FILENAME, ...)
              - pattern-inside: ssh2_sftp_realpath($SFTP, $FILENAME, ...)
              - pattern-inside: ssh2_sftp_unlink($SFTP, $FILENAME, ...)
              - pattern-inside: apache_lookup_uri($FILENAME, ...)
              - pattern-inside: md5_file($FILENAME, ...)
              - pattern-inside: sha1_file($FILENAME, ...)
              - pattern-inside: simplexml_load_file($FILENAME, ...)
          - pattern: $FILENAME

  - id: tainted-url-host
    languages:
      - php
    severity: WARNING
    message: User data flows into the host portion of this manually-constructed URL.
      This could allow an attacker to send data to their own server, potentially
      exposing sensitive data such as cookies or authorization information sent
      with this request. They could also probe internal servers or other
      resources that the server runnig this code can access. (This is called
      server-side request forgery, or SSRF.) Do not allow arbitrary hosts.
      Instead, create an allowlist for approved hosts hardcode the correct host.
    metadata:
      cwe:
        - "CWE-918: Server-Side Request Forgery (SSRF)"
      owasp:
        - A10:2021 - Server-Side Request Forgery (SSRF)
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
      category: security
      technology:
        - php
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      impact: MEDIUM
      likelihood: MEDIUM
      confidence: MEDIUM
      vulnerability_class:
        - Server-Side Request Forgery (SSRF)
    mode: taint
    pattern-sources:
      - patterns:
          - pattern-either:
              - pattern: $_GET
              - pattern: $_POST
              - pattern: $_COOKIE
              - pattern: $_REQUEST
    pattern-sinks:
      - pattern-either:
          - patterns:
              - pattern: |
                  sprintf($URLSTR, ...)
              - metavariable-pattern:
                  metavariable: $URLSTR
                  language: generic
                  pattern: $SCHEME://%s
          - patterns:
              - pattern: |
                  "...{$EXPR}..."
              - pattern-regex: |
                  .*://\{.*
          - patterns:
              - pattern: |
                  "...$EXPR..."
              - pattern-regex: |
                  .*://\$.*
          - patterns:
              - pattern: |
                  "...".$EXPR
              - pattern-regex: |
                  .*://["'].*

#################################################################################################################################
#                                                 		Custom rules															#
#################################################################################################################################

  ###########################
  #A04:2021 - Insecure Design
  ###########################

###REDO

  #####################################
  #A05:2021 - Security Misconfiguration
  #####################################

  - id: display-errors-enabled
    patterns:
      - pattern: ini_set('display_errors', 1)
    message: |
      Displaying errors is enabled. This should be disabled in production to prevent information disclosure. Use `ini_set('display_errors', 0);`.
    languages: [php]
    severity: ERROR
    metadata:
      owasp: A05:2021-Security Misconfiguration
      cwe: "CWE-16: Configuration"

  - id: hardcoded-credentials
    patterns:
      - pattern-either:
          - pattern: $db_user = 'root';
          - pattern: $db_pass = 'password';
          - pattern: $username = 'admin';
          - pattern: $password = 'password';
    message: |
      Hardcoded credentials detected. This practice is insecure and can lead to significant vulnerabilities. Use environment variables or secure vault services instead.
    languages: [php]
    severity: ERROR
    metadata:
      owasp: A05:2021-Security Misconfiguration
      cwe: "CWE-798: Use of Hard-coded Credentials"

  - id: default-php-configuration
    patterns:
      - pattern: |
          ini_set('allow_url_include', 1);
      - pattern: |
          ini_set('register_globals', 1);
    message: |
      Insecure PHP configuration detected. These settings can introduce vulnerabilities. Ensure `allow_url_include` is disabled and `register_globals` is off.
    languages: [php]
    severity: ERROR
    metadata:
      owasp: A05:2021-Security Misconfiguration
      cwe: "CWE-16: Configuration"

  - id: insecure-directory-permissions
    patterns:
      - pattern: |
          chmod($$);
    message: |
      Ensure that directory permissions are set securely. Avoid using broad permissions such as `777`.
    languages: [php]
    severity: WARNING
    metadata:
      owasp: A05:2021-Security Misconfiguration
      cwe: "CWE-732: Incorrect Permission Assignment for Critical Resource"

  - id: missing-security-headers
    patterns:
      - pattern: |
          header($HEADER);
    pattern-not-inside:
      - pattern: |
          header("Strict-Transport-Security: max-age=63072000; includeSubDomains; preload")
      - pattern: |
          header("X-Content-Type-Options: nosniff")
      - pattern: |
          header("X-Frame-Options: DENY")
      - pattern: |
          header("Content-Security-Policy: default-src 'self'")
    message: |
      Important security headers are missing. Ensure the following headers are set: Strict-Transport-Security, X-Content-Type-Options, X-Frame-Options, Content-Security-Policy.
    languages: [php]
    severity: WARNING
    metadata:
      owasp: A05:2021-Security Misconfiguration
      cwe: "CWE-693: Protection Mechanism Failure"


  ##############################################
  #A06:2021 - Vulnerable and Outdated Components 
  ##############################################

  - id: deprecated-php-functions
    patterns:
      - pattern-either:
          - pattern: mysql_*($$)
          - pattern: ereg($$)
          - pattern: split($$)
          - pattern: mcrypt_*($$)
          - pattern: create_function($$)
    message: |
      This function is deprecated and should not be used as it may introduce security vulnerabilities. Please update to a supported function.
    languages: [php]
    severity: WARNING
    metadata:
      owasp: A06:2021-Vulnerable and Outdated Components
      cwe: "CWE-676: Use of Potentially Dangerous Function"

  - id: outdated-php-libraries
    patterns:
      - pattern: '"phpunit/phpunit": "*'
      - pattern: '"symfony/symfony": "*'
      - pattern: '"laravel/framework": "*'
    message: |
      This dependency might be outdated or have known vulnerabilities. Ensure you are using a secure version.
    languages: [json]
    severity: WARNING
    metadata:
      owasp: A06:2021-Vulnerable and Outdated Components
      cwe: "CWE-1104: Use of Unmaintained Third Party Components"

  ######################################################
  #A07:2021 - Identification and Authentication Failures
  ######################################################

  - id: weak-password-hashing
    patterns:
      - pattern-either:
          - pattern: password_hash($$, PASSWORD_DEFAULT)
          - pattern: md5($$)
          - pattern: sha1($$)
    message: |
      Weak or insecure password hashing algorithm detected. Use `password_hash` with `PASSWORD_BCRYPT` or `PASSWORD_ARGON2I` for stronger security.
    languages: [php]
    severity: ERROR
    metadata:
      owasp: A07:2021-Identification and Authentication Failures
      cwe: "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"

  - id: plaintext-password-storage
    patterns:
      - pattern: |
          $password = $_POST['password'];
          // or other insecure storage mechanism
          $password_store = $$;
    message: |
      Storing passwords in plaintext or insecurely is a significant security risk. Ensure passwords are hashed using a secure algorithm before storage.
    languages: [php]
    severity: ERROR
    metadata:
      owasp: A07:2021-Identification and Authentication Failures
      cwe: "CWE-256: Plaintext Storage of a Password"

  - id: insecure-session-management
    patterns:
      - pattern-either:
          - pattern: |
              session_start();
              $_SESSION['user'] = $$;
          - pattern: |
              setcookie('session_id', $$);
    message: |
      Ensure session management practices are secure. Regenerate session IDs on login and use secure cookie attributes.
    languages: [php]
    severity: WARNING
    metadata:
      owasp: A07:2021-Identification and Authentication Failures
      cwe: "CWE-384: Session Fixation"

  - id: hardcoded-credentials
    patterns:
      - pattern-either:
          - pattern: $username = 'admin';
          - pattern: $password = 'password';
          - pattern: |
              $db_user = 'root';
              $db_pass = 'password';
    message: |
      Hardcoded credentials detected. This practice is insecure and can lead to significant vulnerabilities. Use environment variables or secure vault services instead.
    languages: [php]
    severity: ERROR
    metadata:
      owasp: A07:2021-Identification and Authentication Failures
      cwe: "CWE-798: Use of Hard-coded Credentials"

  ####################################################
  #A09:2021 - Security Logging and Monitoring Failures
  ####################################################

  - id: missing-security-logging-authentication
    patterns:
      - pattern: |
          if ($$ == $$) {
            // Authentication logic
            if ($$ == $$) {
              // Successful authentication
              $$;
            } else {
              // Failed authentication
              $$;
            }
          }
    message: |
      Authentication events should be logged for security monitoring. Ensure that successful and failed authentication attempts are logged securely.
    languages: [php]
    severity: WARNING
    metadata:
      owasp: A09:2021-Security Logging and Monitoring Failures
      cwe: "CWE-778: Insufficient Logging"

  - id: missing-security-logging-access
    patterns:
      - pattern: |
          if ($$ == $$) {
            // Access control logic
            $$;
          }
    message: |
      Access control events should be logged for security monitoring. Ensure that access to sensitive data and resources is logged securely.
    languages: [php]
    severity: WARNING
    metadata:
      owasp: A09:2021-Security Logging and Monitoring Failures
      cwe: "CWE-778: Insufficient Logging"

  - id: insecure-log-storage
    patterns:
      - pattern-either:
          - pattern: file_put_contents($log_file, $$)
          - pattern: fopen($log_file, "w")
    message: |
      Logs should be stored securely to prevent unauthorized access. Ensure that log files are protected and not written to insecure locations.
    languages: [php]
    severity: ERROR
    metadata:
      owasp: A09:2021-Security Logging and Monitoring Failures
      cwe: "CWE-532: Insertion of Sensitive Information into Log File"

  - id: missing-log-protection
    patterns:
      - pattern: |
          error_log($$);
    message: |
      Ensure that logs are protected and sensitive information is not exposed in error logs. Review log settings to prevent leakage of sensitive data.
    languages: [php]
    severity: WARNING
    metadata:
      owasp: A09:2021-Security Logging and Monitoring Failures
      cwe: "CWE-532: Insertion of Sensitive Information into Log File"